{
  "@context": [
    "https://w3id.org/ro/crate/1.1/context",
    {
      "subPropertyOf": "http://www.w3.org/2000/01/rdf-schema#subPropertyOf",
      "owl": "http://www.w3.org/2002/07/owl#",
      "xsd": "http://www.w3.org/2001/XMLSchema#",
      "soa": "http://www.semanticweb.org/ontologies/2010/01/core-soa.owl#",
      "sh": "http://www.w3.org/ns/shacl#"
    }
  ],
  "@graph": [
    {
      "@id": "./",
      "@type": "Dataset",
      "conformsTo": [
        {
          "@id": "https://w3id.org/ro/profiles/schema/1.0"
        }
      ],
      "mentions": [
        {"@id":"soa:Composition"},
        {"@id":"soa:Effect"},
        {"@id":"soa:Element"},
        {"@id":"soa:Event"},
        {"@id":"soa:HumanActor"},
        {"@id":"soa:InformationType"},
        {"@id":"soa:Policy"},
        {"@id":"soa:Process"},
        {"@id":"soa:Service"},
        {"@id":"soa:ServiceComposition"},
        {"@id":"soa:ServiceContract"},
        {"@id":"soa:ServiceInterface"},
        {"@id":"soa:System"},
        {"@id":"soa:Task"},
        {"@id":"soa:appliesTo"},
        {"@id":"soa:compositionPattern"},
        {"@id":"soa:constraints"},
        {"@id":"soa:does"},
        {"@id":"soa:doneBy"},
        {"@id":"soa:generatedBy"},
        {"@id":"soa:generates"},
        {"@id":"soa:hasContract"},
        {"@id":"soa:hasInput"},
        {"@id":"soa:hasInterface"},
        {"@id":"soa:hasOutput"},
        {"@id":"soa:interactionAspect"},
        {"@id":"soa:involvesParty"},
        {"@id":"soa:isContractFor"},
        {"@id":"soa:isInputAt"},
        {"@id":"soa:isInterfaceOf"},
        {"@id":"soa:isOutputAt"},
        {"@id":"soa:isPartyTo"},
        {"@id":"soa:isSetBy"},
        {"@id":"soa:isSpecifiedBy"},
        {"@id":"soa:isSubjectTo"},
        {"@id":"soa:legalAspect"},
        {"@id":"soa:orchestratedBy"},
        {"@id":"soa:orchestrates"},
        {"@id":"soa:performedBy"},
        {"@id":"soa:performs"},
        {"@id":"soa:representedBy"},
        {"@id":"soa:represents"},
        {"@id":"soa:respondedToBy"},
        {"@id":"soa:respondsTo"},
        {"@id":"soa:setsPolicy"},
        {"@id":"soa:specifies"},
        {"@id":"soa:usedBy"},
        {"@id":"soa:uses"},
        {"@id": "http://www.semanticweb.org/ontologies/2010/01/core-soa.owl"}
      ]
    },
    {
      "@id": "ro-crate-metadata.json",
      "@type": "CreativeWork",
      "identifier": "ro-crate-metadata.json",
      "about": {
        "@id": "./"
      }
    },


    {
      "@id": "_:b16",
      "@type": "owl:Restriction",
      "owl:minCardinality": {
        "@type": "xsd:int",
        "@value": "1"
      },
      "owl:onProperty": {
        "@id": "soa:isSpecifiedBy"
      }
    },
    {
      "@id": "_:b5",
      "@type": "owl:Restriction",
      "owl:minCardinality": {
        "@type": "xsd:int",
        "@value": "0"
      },
      "owl:onProperty": {
        "@id": "soa:doneBy"
      }
    },
    {
      "@id": "_:b6",
      "@type": "owl:Restriction",
      "owl:maxCardinality": {
        "@type": "xsd:int",
        "@value": "1"
      },
      "owl:onProperty": {
        "@id": "soa:doneBy"
      }
    },
    {
      "@id": "_:b8",
      "@type": "owl:Restriction",
      "owl:minCardinality": {
        "@type": "xsd:int",
        "@value": "0"
      },
      "owl:onProperty": {
        "@id": "soa:orchestrates"
      }
    },
    {
      "@id": "_:b9",
      "@type": "owl:Restriction",
      "owl:maxCardinality": {
        "@type": "xsd:int",
        "@value": "1"
      },
      "owl:onProperty": {
        "@id": "soa:orchestrates"
      }
    },
    {
      "@id": "https://www.opengroup.org//soa/source-book/ontologyv2/",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0",
      "isPartOf": {
        "@id": "https://www.opengroup.org/soa/source-book/intro/"       
      }
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/intro/",
      "@type": "Book",
      "name": "SOA Source Book",
      "publisher": {"@id": "https://www.opengroup.org/"},
      "datePublished": "2014-04",
      "copyrightNotice": "Copyright © 2010-2014, The Open Group",
      "isbn": "978-1-93-721850-8",
      "copyrightHolder": {"@id": "https://www.opengroup.org/"},
      "license": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p15.htm"},
      "url": "https://www.opengroup.org/what-we-do-technology-standards/soa/source-book/intro"
    },
    { "@id": "https://www.opengroup.org/",
      "@type": "Organization",
      "name": "The Open Group"
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – System and Element",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p3.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – HumanActor and Task",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – Service, ServiceContract, and ServiceInterface",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p5.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – Composition and its Subclasses",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p6.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – Policy",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },
    {
      "@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p15.htm",
      "@type": "Chapter",
      "name": "Service-Oriented Architecture Ontology Version 2.0 – Legal",
      "creditText": "Copyright © 2010-2014, The Open Group",
      "text": "Copyright<p>      Copyright © 2010-2014, The Open Group<p>The Open Group hereby authorizes you to use this document for any purpose, PROVIDED THAT any copy of this document, or any part thereof, which you make shall retain all copyright and other proprietary notices contained herein.<p>This document may contain other proprietary notices and copyright information.<p>Nothing contained herein shall be construed as conferring by implication, estoppel, or otherwise any license or right under any patent or trademark of The Open Group or any third party. Except as expressly provided above, nothing contained herein shall be construed as conferring any license or right under any copyright of The Open Group.<p>Note that any product, process, or technology in this document may be the subject of other intellectual property rights reserved by The Open Group, and may not be licensed hereunder.<p>This document is provided \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. Some jurisdictions do not allow the exclusion of implied warranties, so the above exclusion may not apply to you.<p>Any publication of The Open Group may include technical inaccuracies or typographical errors. Changes may be periodically made to these publications; these changes will be incorporated in new editions of these publications. The Open Group may make improvements and/or changes in the products and/or the programs described in these publications at any time without notice.<p>Should any viewer of this document respond with information including feedback data, such as questions, comments, suggestions, or the like regarding the content of this document, such information shall be deemed to be non-confidential and The Open Group shall have no obligation of any kind with respect to such information and shall be free to reproduce, use, disclose, and distribute the information to others without limitation. Further, The Open Group shall be free to use any ideas, concepts, know-how, or techniques contained in such information for any purpose whatsoever including but not limited to developing, manufacturing, and marketing products incorporating such information.<p>If you did not obtain this copy through The Open Group, it may not be the latest version. For your convenience, the latest version of this publication may be downloaded at www.opengroup.org/bookstore.<p><p>Open Group Standard<p>Service-Oriented Architecture Ontology, Version 2.0<p>ISBN:  1-937218-50-8<p>Document Number:  C144<p><p>Published by The Open Group, April 2014.<p><p>Comments relating to the material contained in this document may be submitted to:<p>The Open Group, Apex Plaza, Forbury Road, Reading, Berkshire, RG1 1AX, United Kingdom<p>or by electronic mail to:<p>ogspecs@opengroup.org\n      Trademarks<p>ArchiMate®, DirecNet®, Jericho Forum®, Making Standards Work®, OpenPegasus®, The Open Group®, TOGAF®, and UNIX® are registered trademarks and Boundaryless Information Flow™, Build with Integrity Buy with Confidence™, Dependability Through Assuredness™, FACE™, Open Platform 3.0™, Open Trusted Technology Provider™, and The Open Group Certification Mark™ are trademarks of The Open Group.<p>All other brands, company, and product names are used for identification purposes only and may be trademarks that are the sole property of their respective owners.",
      "isPartOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"}
    },    
    {
      "@id": "http://www.semanticweb.org/ontologies/2010/01/core-soa.owl",
      "@type": "DefinedTermSet",
      "license": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p15.htm"},
      "name": "Service-Oriented Architecture Ontology (OWL)",
      "version": "2.0",
      "subjectOf": {"@id": "https://www.opengroup.org//soa/source-book/ontologyv2/"},
      "contentUrl": "https://www.opengroup.org/soa/ontology/20140404/soa.owl",
      "hasDefinedTerm": [
        {"@id":"soa:Composition"},
        {"@id":"soa:Effect"},
        {"@id":"soa:Element"},
        {"@id":"soa:Event"},
        {"@id":"soa:HumanActor"},
        {"@id":"soa:InformationType"},
        {"@id":"soa:Policy"},
        {"@id":"soa:Process"},
        {"@id":"soa:Service"},
        {"@id":"soa:ServiceComposition"},
        {"@id":"soa:ServiceContract"},
        {"@id":"soa:ServiceInterface"},
        {"@id":"soa:System"},
        {"@id":"soa:Task"},
        {"@id":"soa:appliesTo"},
        {"@id":"soa:compositionPattern"},
        {"@id":"soa:constraints"},
        {"@id":"soa:does"},
        {"@id":"soa:doneBy"},
        {"@id":"soa:generatedBy"},
        {"@id":"soa:generates"},
        {"@id":"soa:hasContract"},
        {"@id":"soa:hasInput"},
        {"@id":"soa:hasInterface"},
        {"@id":"soa:hasOutput"},
        {"@id":"soa:interactionAspect"},
        {"@id":"soa:involvesParty"},
        {"@id":"soa:isContractFor"},
        {"@id":"soa:isInputAt"},
        {"@id":"soa:isInterfaceOf"},
        {"@id":"soa:isOutputAt"},
        {"@id":"soa:isPartyTo"},
        {"@id":"soa:isSetBy"},
        {"@id":"soa:isSpecifiedBy"},
        {"@id":"soa:isSubjectTo"},
        {"@id":"soa:legalAspect"},
        {"@id":"soa:orchestratedBy"},
        {"@id":"soa:orchestrates"},
        {"@id":"soa:performedBy"},
        {"@id":"soa:performs"},
        {"@id":"soa:representedBy"},
        {"@id":"soa:represents"},
        {"@id":"soa:respondedToBy"},
        {"@id":"soa:respondsTo"},
        {"@id":"soa:setsPolicy"},
        {"@id":"soa:specifies"},
        {"@id":"soa:usedBy"},
        {"@id":"soa:uses"}
        
      ]
    },
    {
      "@id": "soa:Composition",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Composition",
      "termCode": "Composition",
      "description": "A composition is the result of assembling a collection of things for a particular purpose. Note in particular that we have purposefully distinguished between the act of composing and the resulting composition as a thing, and that it is in the latter sense we are using the concept of composition here.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p5.htm"},
      "rdfs:subClassOf": [
        {
          "@id": "soa:System"
        }
      ]
    },
    {
      "@id": "soa:Effect",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "rdfs:subClassOf": {
        "@id": "_:b16"
      }
    },
    {
      "@id": "soa:Element",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Element",
      "description": "An element is an opaque entity that is indivisible at a given level of abstraction. The element has a clearly defined boundary.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "rdfs:subClassOf": [
        {
          "@id": "_:b8"
        },
        {
          "@id": "_:b9"
        }
      ]
    },
    {
      "@id": "soa:Event",
      "@type": ["rdfs:Class", "DefinedTerm"]
    },
    {
      "@id": "soa:HumanActor",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Human actor",
      "termCode": "HumanActor",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p3.htm"},
      "description": "A human actor is a person or an organization. (...) HumanActor is specifically not defined as disjoint with System since an organization in many cases is in fact just a particular kind of system",
      "rdfs:subClassOf": {
        "@id": "soa:Element"
      }
    },
    {
      "@id": "soa:InformationType",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Information type",
      "termCode": "InformationType",
      "description": "A service interface can enable another element to give information to or receive information from a service (when it uses that service); specifically the types of information given or received.<p>In any concrete interaction through a service interface the information types on that interface are instantiated by information items, yet for the service interface itself it is the types that are important. Note that the constraints datatype property on ServiceInterface, if necessary, can be used to express constraints on allowed values for certain information types.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"}
    },
    {
      "@id": "soa:Policy",
      "@type": ["rdfs:Class", "DefinedTerm"]
    },
    {
      "@id": "soa:Process",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Process",
      "termCode": "Process",
      "description": "Another key SOA concept is the notion of process. A process is a composition whose elements are composed into a sequence or flow of activities and interactions with the objective of carrying out certain work. This definition is consistent with, for instance, the Business Process Modeling Notation (BPMN) 2.0 definition of a process. <p> Elements in process compositions can be things like human actors, tasks, services, other processes, etc. A process always adds logic via the composition pattern; the result is more than the parts",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p5.htm"},      
      "rdfs:subClassOf": {
        "@id": "soa:Composition"
      }
    },
    {
      "@id": "soa:Service",
      "@type": ["rdfs:Class", "DefinedTerm"],

      "name": "Service",
      "termCode": "Service",
      "description": "A service is a logical representation of a repeatable activity that has a specified outcome. It is self-contained and is a ‘black box’ to its consumers. In the context of the SOA ontology we consider only SOA-based services.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},

      "rdfs:subClassOf": [
        {
          "@id": "soa:Element"
        },
        {
          "@id": "_:b7"
        }
      ]
    },
    {
      "@id": "soa:ServiceComposition",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Service composition",
      "termCode": "ServiceComposition",
      "description": "A key SOA concept is the notion of service composition, the result of assembling a collection of services in order to perform a new higher-level service.<p>As a service composition is the result of assembling a collection of services, ServiceComposition is naturally a subclass of Composition.<p>A service composition may, and typically will, add logic (or even “code”) via the composition pattern. Note that a service composition is not the new higher-level service itself (due to the System and Service classes being disjoint); rather it performs (as an element) that higher-level service.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p5.htm"},
      "rdfs:subClassOf": {
        "@id": "soa:Composition"
      }
    },
    {
      "@id": "soa:ServiceContract",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "name": "Service contract",
      "termCode": "ServiceContract",
      "description": "In many cases, specific agreements are needed in order to define how to use a service. This can either be because of a desire to regulate such use or can simply be because the service will not function properly unless interaction with it is done in a certain sequence. A service contract defines the terms, conditions, and interaction rules that interacting participants must agree to (directly or indirectly). A service contract is binding on all participants in the interaction, including the service itself and the element that provides it for the particular interaction in question",
      
      "rdfs:subClassOf": [
        {
          "@id": "_:b0"
        },
        {
          "@id": "_:b1"
        },
        {
          "@id": "_:b10"
        },
        {
          "@id": "_:b11"
        },
        {
          "@id": "_:b12"
        },
        {
          "@id": "_:b13"
        }
      ]
    },
    {
      "@id": "soa:ServiceInterface",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Service interface",
      "termCode": "ServiceInterface",
      "description": "An important characteristic of services is that they have simple, well-defined interfaces. This makes it easy to interact with them, and enables other elements to use them in a structured manner. A service interface defines the way in which other elements can interact and exchange information with a service.<p>The concept of an interface is in general well understood by practitioners, including the notion that interfaces define the parameters for information passing in and out of them when invoked. What differs from domain to domain is the specific nature of how an interface is invoked and how information is passed back and forth. Service interfaces are typically, but not necessarily, message-based (to support loose-coupling). Furthermore, service interfaces are always defined independently from any service implementing them (to support loose-coupling and service mediation).",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"}
    },
    {
      "@id": "soa:System",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "System",
      "termCode": "System",
      "description": "A system is an organized collection of other things. Specifically things in a system collection are instances of Element, each such instance being used by the system.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "rdfs:subClassOf": {
        "@id": "soa:Element"
      }
    },
    {
      "@id": "soa:Task",
      "@type": ["rdfs:Class", "DefinedTerm"],
      "name": "Task",
      "termCode": "Task",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p3.htm"},
      "description": "A task is an atomic action which accomplishes a defined result. Tasks are done by people or organizations, specifically by instances of HumanActor.",

      "rdfs:subClassOf": [
        {
          "@id": "soa:Element"
        },
        {
          "@id": "_:b5"
        },
        {
          "@id": "_:b6"
        }
      ]
    },
    {
      "@id": "soa:appliesTo",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "domainIncludes": {
        "@id": "soa:Policy"
      }
    },
    {
      "@id": "soa:compositionPattern",
      "@type": ["rdf:Property", "DefinedTerm", "owL:DatatypeProperty"],
      "name": "composition pattern",
      "termCode": "compositionPattern",
      "description": "As discussed above, any composition must have associated with it a specific composition pattern, that pattern describing the way in which a collection of elements is assembled to a result. The concept of a composition pattern is captured by the compositionPattern datatype property. Note that even though certain kinds of composition patterns are of special interest within SOA (see below), the compositionPattern datatype property may take any value as long as that value describes how to assemble the elements used by the composition with which it is associated.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p5.htm"},
      "sh:minCount": 1,
      "sh:maxCount": 1,
      "domainIncludes": {
        "@id": "soa:Composition"
      },
      "rangeIncludes": {
        "@id": "http://schema.org/Text"
      }
    },
    {
      "@id": "soa:constraints",
      "@type": ["rdf:Property", "DefinedTerm", "owL:DatatypeProperty"],
      "name": "constraints",
      "termCode": "constraints",
      "description": "The constraints datatype property on ServiceInterface captures the notion that there can be constraints on the allowed interaction such as only certain value ranges allowed on given parameters. Depending on the nature of the service and the service interface in question, these constraints may be defined either formally or informally (the informal case being relevant at a minimum for certain types of real-world services).",
      "domainIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "rangeIncludes": {
        "@id": "http://schema.org/Text"
      },
      "sh:minCount": 1,
      "sh:maxCount": 1
    },
    {
      "@id": "soa:does",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "does",
      "termCode": "does",
      "description": "Inverse of property soa:doneBy",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p3.htm"},
      "inverseOf": {
        "@id": "soa:doneBy"
      },
      "domainIncludes": {
        "@id": "soa:HumanActor"
      },
      "rangeIncludes": {
        "@id": "soa:Task"
      }      
    },
    {
      "@id": "soa:doneBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "done by",
      "termCode": "doneBy",
      "description": "Tasks are naturally thought of as being done by people or organizations. If we think of tasks as being the actual things done, then the natural cardinality is that each instance of Task is done by at most one instance of HumanActor. Due to the atomic nature of instances of Task we rule out the case where such an instance is done jointly by multiple instances of HumanActor. The cardinality can be zero if someone chooses not to instantiate all possible human actors. On the other hand, the same instance of HumanActor can (over time) easily do more than one instance of Task. The does property, and its inverse doneBy, capture the relation between a human actor and the tasks it performs.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p3.htm"},      
      "domainIncludes": {
        "@id": "soa:Task"
      },
      "rangeIncludes": {
        "@id": "soa:HumanActor"
      }
    },
    {
      "@id": "soa:generatedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "generated by",
      "description": "Inverse of property soa:generates",
      "inverseOf": {
        "@id": "soa:generates"
      },
      "domainIncludes": {
        "@id": "soa:Event"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }      
    },
    {
      "@id": "soa:generates",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "generates",
      "description": "",
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Event"
      }
    },
    {
      "@id": "soa:hasContract",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "inverseOf": {
        "@id": "soa:isContractFor"
      }
    },
    {
      "@id": "soa:hasInput",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "has input",
      "termCode": "hasInput",
      "description": "The hasInput property, and its inverse isInputAt, capture the abstract notion of a particular type of information being given when interacting with a service through a service interface.<p>Note that there is a many-to-many relationship between service interfaces and input information types. A given information type may be input at many service interfaces or none at all. Similarly, a given service interface may have many information types as input or none at all. It is important to realize that some services may have only inputs (triggering an asynchronous action without a defined response) and other services may have only outputs (elements performing these services execute independently yet may provide output that is used by other elements).",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "rangeIncludes": {
        "@id": "soa:InformationType"
      }
    },
    {
      "@id": "soa:hasInterface",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "has interface",
      "termCode": "hasInterface",
      "description": "The hasInterface property, and its inverse isInterfaceOf, capture the abstract notion of a service having a particular service interface. In one direction, any service must have at least one service interface; anything else would be contrary to the definition of a service as a representation of a repeatable activity that has a specified outcome and is a ‘black box’ to its consumers. In the other direction, there can be service interfaces that are not yet interfaces of any defined services. Also, the same service interface can be an interface of multiple services. The latter does not mean that these services are the same, nor even that they have the same effect; it only means that it is possible to interact with all these services in the manner defined by the service interface in question.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "sh:minCount": 1,
      "domainIncludes": {
        "@id": "soa:Service"
      },
      "rangeIncludes": {
        "@id": "soa:ServiceInterface"
      }
    },
    {
      "@id": "soa:hasOutput",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "has output",
      "termCode": "hasOutput",
      "description": "The hasOutput property, and its inverse isOutputAt, capture the abstract notion of a particular type of information being received when interacting with a service through a service interface.<p>Note that there is a many-to-many relationship between service interfaces and output information types. A given information type may be output at many service interfaces or none at all. Similarly, a given service interface may have many information types as output or none at all. It is important to realize that some services may have only inputs (triggering an asynchronous action without a defined response) and other services may have only outputs (elements performing these services execute independently yet may provide output that is used by other elements).",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "rangeIncludes": {
        "@id": "soa:InformationType"
      }
    },
    {
      "@id": "soa:interactionAspect",
      "@type": ["rdf:Property", "DefinedTerm", "owL:DatatypeProperty"],
      "name": "interaction aspect",
      "termCode": "interactionAspect",
      "description": "Service contracts explicitly regulate both the interaction aspects (see the hasContract and isContractFor properties) and the legal agreement aspects (see the involvedParty and isPartyTo properties) of using a service. The two types of aspects are formally captured by defining the interactionAspect and legalAspect datatype properties on the ServiceContract class.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "sh:minCount": 1,
      "sh:maxCount": 1,
      "domainIncludes": {
        "@id": "soa:ServiceContract"
      },
      "rangeIncludes": {
        "@id": "http://schema.org/Text"
      }
    },
    {
      "@id": "soa:involvesParty",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "inverseOf": {
        "@id": "soa:isPartyTo"
      }
    },
    {
      "@id": "soa:isContractFor",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "sh:minCount": 1,
      "domainIncludes": {
        "@id": "soa:ServiceContract"
      },
      "rangeIncludes": {
        "@id": "soa:Service"
      }
    },
    {
      "@id": "soa:isInputAt",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "is input at",
      "termCode": "isInputAt",
      "description": "Inverse of property soa:hasInput",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:InformationType"
      },
      "rangeIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "inverseOf": {
        "@id": "soa:hasInput"
      }
    },
    {
      "@id": "soa:isInterfaceOf",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "is interface of",
      "termCode": "isInterfaceOf",
      "description": "Inverse of property soa:hasInterface",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "rangeIncludes": {
        "@id": "soa:Service"
      },      
      "inverseOf": {
        "@id": "soa:hasInterface"
      }
    },
    {
      "@id": "soa:isOutputAt",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "is output at",
      "termCode": "isOutputAt",
      "description": "Inverse of property soa:hasOutput",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:InformationType"
      },
      "rangeIncludes": {
        "@id": "soa:ServiceInterface"
      },
      "inverseOf": {
        "@id": "soa:hasOutput"
      }
    },
    {
      "@id": "soa:isPartyTo",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "domainIncludes": {
        "@id": "soa:HumanActor"
      },
      "rangeIncludes": {
        "@id": "soa:ServiceContract"
      }
    },
    {
      "@id": "soa:isSetBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "inverseOf": {
        "@id": "soa:setsPolicy"
      }
    },
    {
      "@id": "soa:isSpecifiedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "is specified by",
      "termCode": "isSpecifiedBy",
      "description": "Inverse of soa:specifies",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "inverseOf": {
        "@id": "soa:specifies"
      },
      "sh:minCount": 1,
      "domainIncludes": {
        "@id": "soa:Effect"
      },
      "rangeIncludes": {
        "@id": "soa:ServiceContract"
      }      
    },
    {
      "@id": "soa:isSubjectTo",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "inverseOf": {
        "@id": "soa:appliesTo"
      }
    },
    {
      "@id": "soa:legalAspect",
      "@type": ["rdf:Property", "DefinedTerm", "owL:DatatypeProperty"],
      "description": "Service contracts explicitly regulate both the interaction aspects (see the hasContract and isContractFor properties) and the legal agreement aspects (see the involvedParty and isPartyTo properties) of using a service. The two types of aspects are formally captured by defining the interactionAspect and legalAspect datatype properties on the ServiceContract class. Note that the second of these attributes, the legal agreement aspects, includes concepts such as Service-Level Agreements (SLAs).",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "sh:minCount": 1,
      "sh:maxCount": 1,
      "domainIncludes": {
        "@id": "soa:ServiceContract"
      },
      "rangeIncludes": {
        "@id": "http://schema.org/Text"
      }
    },
    {
      "@id": "soa:orchestratedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "orchestrated by",
      "termCode": "orchestratedBy",
      "description": "An orchestration has one particular element that oversees and directs the other elements used by the composition. This type of relationship is important enough that we have chosen to capture the abstract notion in the orchestrates property and its inverse orchestratedBy.<p>In one direction, a composition has at most one element that orchestrates it, and the cardinality can only be one (1) if in fact the composition pattern of that composition is an orchestration. In the other direction, an element can orchestrate at most one composition which then must have an orchestration as its composition pattern.<p>Note that in practical applications of the ontology, even though Service is a subclass of Element, a service (as a purely logical representation) is not expected to orchestrate a composition.",
      "sh:minCount": 0,
      "sh:maxCount": 1,
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "domainIncludes": {
        "@id": "soa:Composition"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }
    },
    {
      "@id": "soa:orchestrates",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "orchestrates",
      "termCode": "orchestrates",
      "description": "Inverse of property soa:orchestratedBy",
      "sh:minCount": 0,
      "sh:maxCount": 1,
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},

      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Composition"
      },      
      "inverseOf": {
        "@id": "soa:orchestratedBy"
      }
    },
    {
      "@id": "soa:performedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "performed by",
      "termCode": "performedBy",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},      
      "description": "Inverse of property soa:performs",
      "inverseOf": {
        "@id": "soa:performs"
      },
      "domainIncludes": {
        "@id": "soa:Service"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }
    },
    {
      "@id": "soa:performs",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "performs",
      "termCode": "performs",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "description": "As a service itself is only a logical representation, any service is performed by something. The something that performs a service must be opaque to anyone interacting with it, an opaqueness which is the exact nature of the Element class. This concept is captured by the performs and performedBy properties. This also captures the fact that services can be performed by elements of other types than systems. This includes elements such as software components, human actors, and tasks.",
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Service"
      }
    },
    {
      "@id": "soa:representedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "represented By",
      "termCode": "representedBy",
      "description": "Inverse of property soa:represents",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      },
      "inverseOf": {
        "@id": "soa:represents"
      }
    },
    {
      "@id": "soa:represents",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "represents",
      "termCode": "represents",
      "description": "The environment described by an SOA is intrinsically hierarchically composite (see also Section 5.2 for a definition of the Composition class); in other words, the elements of SOA systems can be repeatedly composed to ever higher levels of abstraction. One aspect of this has already been addressed by the uses and usedBy properties in that we can use these to express the notion of systems of systems. This is still a very concrete relationship though, and does not express the concept of architectural abstraction. We find the need for architectural abstraction in various places such as a role representing the people playing that role, an organizational unit representing the people within it (subtly different from that same organizational unit using the people within it, as the represents relationship indicates the organizational unit as a substitute interaction point), an architectural building block representing an underlying construct (for instance, important to enterprise architects wanting to explicitly distinguish between constructs and building blocks), and an Enterprise Service Bus (ESB) representing the services that are accessible through it (for instance, relevant when explicitly modeling operational interaction and dependencies). The concept of such an explicitly changing viewpoint, or level of abstraction, is captured by the represents and representedBy properties.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }
    },
    {
      "@id": "soa:respondedToBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "inverseOf": {
        "@id": "soa:respondsTo"
      },
      "domainIncludes": {
        "@id": "soa:Event"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }      
    },
    {
      "@id": "soa:respondsTo",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Event"
      }
    },
    {
      "@id": "soa:setsPolicy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "domainIncludes": {
        "@id": "soa:HumanActor"
      },
      "rangeIncludes": {
        "@id": "soa:Policy"
      }
    },
    {
      "@id": "soa:specifies",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "specifies",
      "termCode": "specifies",
      "description": "While a service intrinsically has an effect every time someone interacts with it, in order to trust the effect to be something in particular, the effect needs to be specified as part of a service contract. The specifies property, and its inverse isSpecifiedBy, capture the abstract notion of a service contract specifying a particular effect as part of the agreement for using a service. Note that the specified effect can apply to both the interactionAspect datatype property (simply specifying what will happen when interacting with the service according to the service contract) and the legalAspect datatype property (specifying a contractually promised effect).<p>Anyone wanting a guaranteed effect of the interaction with a given service must ensure that the desired effect is specified in a service contract applying to that interaction. By definition, any service contract must specify at least one effect. In the other direction, an effect must be an effect of at least one service contract; this represents that fact that we have chosen only to formalize those effects that are specified by service contracts (and not all intrinsic effects of all services).",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p4.htm"},
      "sh:minCount": 1,
      "domainIncludes": {
        "@id": "soa:ServiceContract"
      },
      "rangeIncludes": {
        "@id": "soa:Effect"
      }
    },
    {
      "@id": "soa:usedBy",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "used by",
      "description": "Inverse of property soa:uses",
      "termCode": "usedBy",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "inverseOf": {
        "@id": "soa:uses"
      },
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }      
    },
    {
      "@id": "soa:uses",
      "@type": ["rdf:Property", "DefinedTerm", "owL:ObjectProperty"],
      "name": "uses",
      "termCode": "uses",
      "description": "Elements may use other elements in various ways. In general, the notion of some element using another element is applied by practitioners for all of models, executables, and physical objects. What differs from domain to domain is the way in which such use is perceived. <p>An element uses another element if it interacts with it in some fashion. Interacts here is interpreted very broadly ranging through, for example, an element simply being a member of (used by) some system (see later for a formal definition of the System class), an element interacting with (using) another element (such as a service; see later for a formal definition of the Service class) in an ad hoc fashion, or even a strongly coupled dependency in a composition (see Section 5.2 for a formal definition of the Composition class). The uses property, and its inverse usedBy, capture the abstract notion of an element using another. These properties capture not just transient relations. Instantiations of the property can include “uses at this instant”, “has used”, and “may in future use”. <p>For the purposes of this ontology we have chosen not to attempt to enumerate and formally define the multitude of different possible semantics of a uses relationship. We leave the semantic interpretations to a particular sub-domain, application, or even design approach.",
      "subjectOf": {"@id": "https://www.opengroup.org/soa/source-book/ontologyv2/p2.htm"},
      "domainIncludes": {
        "@id": "soa:Element"
      },
      "rangeIncludes": {
        "@id": "soa:Element"
      }
    }

  ]
}